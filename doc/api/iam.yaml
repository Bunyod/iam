openapi: 3.0.0
info:
  title: IAM µS
  version: "0.0.1"
  # Description {{{1
  description: |
    # Registration process
    TODO

    ## Staging
    TODO

    ## Registration

    # Authentication process

    When a client uses the challenge and response method of authentication, it means the client authenticates with the µS platform as a real user.

    To begin the challenge and response authentication process, make an `HTTPS GET` request to:
    
        /challenge?username=<username>
    
    where `<username>` is the user's email address to be used for authentication. There is no request body.

    This generates a `200 OK` response with a body having the following structure:
    
        { 
          "salt": <string: required>, 
          "iterations": <integer: required>, 
          "challenge": <string: required> 
        }  	

    *salt*
    : Hexadecimal representation of a 128 bit value.
    
    *iterations*
    : Number of iterations to hash during key derivation.
    
    *challenge*
    : Hexadecimal representation of a 256 bit value.
    
    To complete the authentication process, make an `HTTPS POST` request to:
    
        /authenticate
    
    The structure of the request is as follows:
    
        { 
          "username": <string: required> 
          "response": <string: required> 
        }	

    *username*
    : The user email address to be used for authentication.
    
    *response*
    : Hexadecimal representation of a 256 bit value.
    
    On success, this generates a `204 No Content` response with no body. An incorrect response to the challenge (or an unrecognized username) generates a `401 Unauthorized` response from the server.
    
    ## Calculating the response

    This section defines how the client should calculate the response to the challenge generated by the server. The required steps are listed below. These are followed by an example Scala implementation.

    1.  Convert the `salt` and `challenge` parameters (which are hexadecimal strings) to binary representations.
    1.  Derive the [PBKDF2](https://en.wikipedia.org/wiki/PBKDF2) key from the user's password along with the `salt` and `iterations` parameters:
      ```
      key = PBKDF2(HMAC-SHA256, password, salt, iterations, 256)
      ```
    The `salt` and `iterations` parameters are _invariant_ for each user and so the same key can be used for future authentication procedures for the same user.
    1. Generate the HMAC response using the derived key and the challenge parameter:
      ```
      response = HMAC-SHA256(key, challenge)`
      ```
    The challenge parameter is different each time the authentication procedure is executed and so a new response must be calculated each time.
    
    ### Example Scala implementation
    TODO

# The domain of the service {{{1
#host: api.mdpm.de
#
#servers:
#  - url: http://api.mdpm.de
#    description: Production server
#  - url: http://staging-api.mdpm.com
#    description: Internal staging server for testing

# Suported schemes {{{1
schemes:
  - https

# Base path {{{1
basePath: /

# Supported formats {{{1
consumes:
  - application/json

produces:
  - application/json

# Paths {{{1
paths:
  # Registration {{{2
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # TODO
  #
  # Stage {{{3
  /stage:
    post:
      summary: ...
      description: n/a
      tags:
        - Account
      parameters:
        - in: body
          name: username
          description: ...
          required: true
          schema:
            type: object
            properties:
              username:
                $ref: '#/components/schemas/EMail'
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        default:
          description: ...
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  # Authentication {{{2
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # TODO Consider
  # - https://en.wikipedia.org/wiki/Challenge%E2%80%93response_authentication
  # - https://en.wikipedia.org/wiki/Salted_Challenge_Response_Authentication_Mechanism
  # - https://en.wikipedia.org/wiki/PBKDF2
  # TODO Example at
  # - https://support.starleaf.com/integrating/cloud-api/authentication-using-challenge-and-response-method/
  #
  # Challenge {{{3
  /challenge:
    get:
      summary: Creates a new `challenge` which must be used to authenticate. 
      description: n/a
      tags:
        - Account
      parameters:
        - in: query
          name: username
          description: The user's email address to be used for authentication.
          required: true
          type: string
          format: email
      responses:
        '200':
          description: The server response with the challenge.
          
            The client must use this challenge together with the user password, to create the challenge response.
          schema:
            type: object
            properties:
              salt:
                type: string
                format: hexadecimal
                description: Hexadecimal representation of a 128 bit value—refer to Calculating the response for more details.
              iterations: 
                type: string
                description: n/a
              challenge:
                type: string
                format: hexadecimal
                description: Hexadecimal representation of a 256 bit value—refer to Calculating the response for more details.
        default:
          description: Unexpected error
          schema:
            $ref: '#/components/schemas/Error'
  # Response {{{3
  #
  /authenticate:
    post:
      summary: Authenticate user. 
      description: n/a
      tags:
        - Account
      consumes:
        - application/json
      parameters:
        - in: body
          name: authentication
          description: ...
          required: true
          schema:
            type: object
            required:
              - username
              - response
            properties:
              username:
                $ref: '#/components/schemas/EMail'
              response:
                type: string
                format: hexadecimal
      responses:
        '204':
          description: On success no response body.  
        '401':
          description: An incorrect response to the challenge (or an unrecognized username) generates a `401 Unauthorized` response from the server.
          schema:
            $ref: '#/components/schemas/Error'
  # Password reset {{{2
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # TODO 
  #
# Components {{{1
components:
  # Schemas {{{2
  schemas:
    # EMail {{{3
    EMail:
      type: string
      format: email
      description: ...
    # Result {{{3
    Result:
      type: object
      description: A generic result message.
      properties:
        type:
          type: string
          description: ...
        subject: 
          type: string
          description: ...
        details:
          type: string
          description: ...
    # Error {{3
    Error:
      type: object
      description: A generic error message.
      properties:
        code:
          type: integer
          format: int32
          description: The IAM µS unique error code.
        message:
          type: string
          description: The error message.
# vim: fdm=marker
